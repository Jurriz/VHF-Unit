#ifndef __TRX4460_H
#define __TRX4460_H
#include <p18f46k22.h>

#include "Header_h.h"



// MODEM_CLKGEN_BAND, Group: 0x20, Index: 0x51 bitarna 2-1-0
// Table 13. Output Divider (Outdiv) Values for the Si4460/61/63		
// Value	Outdiv 	Lower (MHz) 	Upper (MHz)
// 	 5	x101	24			142				175		
// 	 3	x011	12			284				350
// 	 2	x010	 8			420				525
//   0	x000	 4			850			   1050

// ======================================================================================================================
// OBS Parameter nummer 2 i START_UP (0x07, 0x02, 0xXX) får inte vara 0x81 i produktionskretsarna eftersom ingen Patch är installerad i dem!
// ======================================================================================================================
const rom struct MyNewRad BeaconRad[] = {
//  0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16
{0x07, 0x02, 0x01, 0x01, 0x01, 0x8C, 0xBA, 0x80},		// 0

// GPIO2 agerar huvudbrytare och ska vara '1' när den ska vara aktiv (på) (0x03) annars låg (0x02)
// GPIO3 styr UHF ('0'/0x02)) eller VHF ('1'/0x03)
// GPIO0 eller GPIO1 kan, om man vill, agera CTS (0x08) Går hög när ett nytt kommando kan tas emot annars låg
// GPIOn     [0]   [1]   [2]   [3]  NIRQ   SDO  GEN_GONFIG
{0x08, 0x13, 0x01, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00},		// 1 Slår på switchen för VHF
{0x06, 0x11, 0x00, 0x02, 0x00, 0x00, 0x00},					// 2 grupp 00, antal parametrar 02, start adress 00, data är 00 och 00
{0x05, 0x11, 0x00, 0x01, 0x03, 0x20},						// 3
{0x05, 0x11, 0x01, 0x01, 0x00, 0x00},						// 4
{0x08, 0x11, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00},		// 5
{0x05, 0x11, 0x10, 0x01, 0x04, 0x21},
{0x10, 0x11, 0x20, 0x0C, 0x00, 0x08, 0x00, 0x07, 0x01, 0x86, 0xA0, 0x01, 0x8C, 0xBA, 0x80, 0x00, 0x12},	// 7
{0x05, 0x11, 0x20, 0x01, 0x0C, 0xE8},
{0x10, 0x11, 0x20, 0x0C, 0x18, 0x00, 0x00, 0x08, 0x02, 0x80, 0x00, 0x30, 0x20, 0x00, 0xE8, 0x00, 0xA3},	// 9
{0x10, 0x11, 0x20, 0x0C, 0x24, 0x03, 0x26, 0x99, 0x00, 0xC9, 0x02, 0x00, 0x00, 0x00, 0x12, 0x81, 0x2E},	// 10
{0x07, 0x11, 0x20, 0x03, 0x30, 0x03, 0x3D, 0xA0},
{0x05, 0x11, 0x20, 0x01, 0x35, 0xE0},
{0x10, 0x11, 0x20, 0x0C, 0x38, 0x11, 0x24, 0x24, 0x80, 0x1A, 0xFF, 0xFF, 0x00, 0x29, 0x0C, 0xA4, 0x23},	// 13
{0x09, 0x11, 0x20, 0x05, 0x45, 0x03, 0x03, 0x12, 0x02, 0x00},
{0x08, 0x11, 0x20, 0x04, 0x4B, 0x06, 0x09, 0x1C, 0x40}, // 15

//{0x05, 0x11, 0x20, 0x01, 0x51, 0x0A},
{0x05, 0x11, 0x20, 0x02, 0x50, 0x84, 0x0D},    //
// -----------------------------------------------------------------------------------------------------------
//{0x06, 0x11, 0x20, 0x02, 0x50, 0x84, 0x0D},		// outdiv = 101 == 24, 142-175MHz
// -----------------------------------------------------------------------------------------------------------

{0x06, 0x11, 0x20, 0x02, 0x54, 0x0A, 0x07}, // 17
{0x05, 0x11, 0x20, 0x01, 0x57, 0x00},
{0x09, 0x11, 0x20, 0x05, 0x5B, 0x40, 0x04, 0x17, 0x78, 0x20},
{0x10, 0x11, 0x21, 0x0C, 0x00, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01},	// 20
{0x10, 0x11, 0x21, 0x0C, 0x0C, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9},	// 21
{0x10, 0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F},	// 22

// 17-11-27: Var tidigare tvärt om, HIGH_PA_POWER gav då inställningen 0x1F
#ifdef HIGH_PA_POWER
	{0x08, 0x11, 0x22, 0x04, 0x00, 0x18, 0x4F, 0xC0, 0x1D},							// 23	PA_PWR, här 0x4F men max är 0x4F, 10V +25% 
#else
	{0x08, 0x11, 0x22, 0x04, 0x00, 0x18, 0x4F, 0xC0, 0x1D},		// 0x1F					// 23	PA_PWR, här 0x1F men max är 0x4F, 8V
#endif

{0x0B, 0x11, 0x23, 0x07, 0x00, 0x2C, 0x0E, 0x0B, 0x04, 0x0C, 0x73, 0x03},			// 24
{0x0C, 0x11, 0x40, 0x08, 0x00, 0x44, 0x0D, 0x89, 0xD8, 0x17, 0xA1, 0x20, 0xFA},		// 25	FREQ_CONTROL_INTE (1) och FREQ_CONTROL_FRAC (3)
{0x05, 0x31, 0x00, 0x00, 0x00, 0x00},												// 26 	Start TX immediately on channel 0
// -------------------------------------------------------------------------------------------------------------------------
{0x02, 0x34, 0x01},		//0x01	// 27		// CHANGE_STATE to SLEEP or STANDBY  (puls off?) 	(se GLOBAL_CLK_CFG:CLK_32K_SEL)
{0x02, 0x34, 0x07},			// 28		// CHANGE_STATE to TX state (puls on?)
{0x01, 0x20},	 			// 29 Reset av alla IRQ

// GPIO2 agerar huvudbrytare och ska vara '1' när den ska vara aktiv (på) (0x03) annars låg (0x02)
// GPIO3 styr UHF ('0'/0x02)) eller VHF ('1'/0x03)
// GPIO0 eller GPIO1 kan agera CTS (0x08) Går hög när ett nytt kommando kan tas emot annars låg

// (31) [2] 0x03 [3] 0x02 Gjort om denna till den första versionen
// GPIOn      [0]   [1]   [2]   [3]  NIRQ   SDO  GEN_GONFIG
{0x08, 0x13, 0x01, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00},		// 30 Slår på switchen för VHF
{0x08, 0x13, 0x01, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00},		// 31 Slår på switchen för UHF
{0x08, 0x13, 0x01, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00},		// 32 Slår av matningsspänningen till antenn-switchen
{0x02, 0x34, 0x03}											// 33 CHANGE_STATE to READY

//  0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16
};

// {0x08, 0x13, 0x01, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00},			// 29 Slår på switchen för UHF
//
// 0-31 totalt
//  0 = POWER_UP
// 25 = Frekvensinställningarna
// 30 = Slår på switchen för VHF
// 31 = Slår på switchen för UHF
// 32 = Slår av matningsspänningen till antenn-switchen
// 33 = Byte state till READY



// ======================================================================================================================
// OBS Parameter nummer 2 i START_UP (0x07, 0x02, 0xXX) får inte vara 0x81 i produktionskretsarna eftersom ingen Patch är installerad i dem!
// ======================================================================================================================
const rom struct MyNewRad Beacon433Rad[] = { 
//       1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16
{0x07, 0x02, 0x01, 0x01, 0x01, 0x8C, 0xBA, 0x80},	// 0
// GPIO2 agerar huvudbrytare och ska vara '1' när den ska vara aktiv (på) (0x03) annars låg (0x02)
// GPIO3 styr UHF ('0'/0x02)) eller VHF ('1'/0x03)
// GPIO0 eller GPIO1 kan agera CTS (0x08) Går hög när ett nytt kommando kan tas emot annars låg
// GPIOn     [0]   [1]   [2]   [3]  NIRQ   SDO  GEN_GONFIG
{0x08, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},		// 1
{0x06, 0x11, 0x00, 0x02, 0x00, 0x00, 0x00},					// 2
{0x05, 0x11, 0x00, 0x01, 0x03, 0x20},
{0x05, 0x11, 0x01, 0x01, 0x00, 0x00},
{0x08, 0x11, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00},		// 5
{0x05, 0x11, 0x10, 0x01, 0x04, 0x21},
{0x10, 0x11, 0x20, 0x0C, 0x00, 0x08, 0x00, 0x07, 0x01, 0x86, 0xA0, 0x01, 0x8C, 0xBA, 0x80, 0x00, 0x06},	// 7
{0x05, 0x11, 0x20, 0x01, 0x0C, 0x4D},
{0x10, 0x11, 0x20, 0x0C, 0x18, 0x00, 0x00, 0x08, 0x03, 0x80, 0x00, 0x20, 0x10, 0x00, 0xE8, 0x00, 0xD9},	// 9
{0x10, 0x11, 0x20, 0x0C, 0x24, 0x02, 0x5C, 0xF3, 0x00, 0x97, 0x02, 0x00, 0x00, 0x00, 0x12, 0x80, 0x65},	// 10
{0x07, 0x11, 0x20, 0x03, 0x30, 0x04, 0x42, 0xA0},
{0x05, 0x11, 0x20, 0x01, 0x35, 0xE0},
{0x10, 0x11, 0x20, 0x0C, 0x38, 0x11, 0x2F, 0x2F, 0x80, 0x1A, 0xFF, 0xFF, 0x00, 0x29, 0x0C, 0xA4, 0x23},	// 13
{0x09, 0x11, 0x20, 0x05, 0x45, 0x03, 0x02, 0x4E, 0x02, 0x00},
{0x08, 0x11, 0x20, 0x04, 0x4B, 0x06, 0x09, 0x1C, 0x40},

//{0x06, 0x11, 0x20, 0x02, 0x50, 0x84, 0x0A},	// 010 - Outdiv == 8, 420-525MHz
{0x06, 0x11, 0x20, 0x01, 0x50, 0x84},    // 16

{0x06, 0x11, 0x20, 0x02, 0x54, 0x08, 0x07}, //17
{0x05, 0x11, 0x20, 0x01, 0x57, 0x00},
{0x09, 0x11, 0x20, 0x05, 0x5B, 0x40, 0x04, 0x12, 0x78, 0x20},
{0x10, 0x11, 0x21, 0x0C, 0x00, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01},	// 20
{0x10, 0x11, 0x21, 0x0C, 0x0C, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9},	// 21
{0x10, 0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F},	// 22

{0x08, 0x11, 0x22, 0x04, 0x00, 0x18, 0x1F, 0xC0, 0x1D},								// 23 PA_PWR, här 0x1F men max är 0x4F 

{0x0B, 0x11, 0x23, 0x07, 0x00, 0x2C, 0x0E, 0x0B, 0x04, 0x0C, 0x73, 0x03},			// 24
{0x0C, 0x11, 0x40, 0x08, 0x00, 0x41, 0x0C, 0xFC, 0x88, 0x01, 0xF8, 0x20, 0xFE},		// 25
{0x05, 0x31, 0x15, 0x00, 0x00, 0x00},	// 26 Kanalbredd 6.25, 0x14=20x6.25=125=ch10, Start TX immediately
{0x02, 0x34, 0x01},						// 27 CHANGE_STATE to SLEEP or STANDBY  (puls off?) 	(se GLOBAL_CLK_CFG:CLK_32K_SEL)
{0x02, 0x34, 0x07},						// 28 CHANGE_STATE to TX state (puls on?)

// GPIO2 agerar huvudbrytare och ska vara '1' när den ska vara aktiv (på) (0x03) annars låg (0x02)
// GPIO3 styr UHF ('0'/0x02)) eller VHF ('1'/0x03)
// GPIO0 eller GPIO1 kan agera CTS (0x08) Går hög när ett nytt kommando kan tas emot annars låg

// GPIOn      [0]   [1]   [2]   [3]  NIRQ   SDO  GEN_GONFIG
{0x08, 0x13, 0x01, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00},			// 29 Slår på switchen för UHF
{0x08, 0x13, 0x01, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00},			// 30 Slår av matningsspänningen till antenn-switchen
{0x02, 0x34, 0x03}												// 31 CHANGE_STATE to READY
};
//       1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16
// -------------------------------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------------------------------

// 0-31 totalt
//  0 = POWER_UP
// 26 = Start TX immediately on channel 0
// 27 = CHANGE_STATE to SLEEP or STANDBY  (puls off?) 	(se GLOBAL_CLK_CFG:CLK_32K_SEL)
// 28 = CHANGE_STATE to TX state (puls on?)
// 29 = Slår på switchen för VHF
// 30 = Slår av matningsspänningen till antnn-switchen
// 31 = Byte state till READY


// -------------------------------------------------------------------------------------------------------------------------
// OBS Parameter nummer 2 i START_UP (0x07, 0x02, 0xXX) får inte vara 0x81 i produktionskretsarna eftersom ingen Patch är installerad i dem!
// -------------------------------------------------------------------------------------------------------------------------
const rom struct MyNewRad RXTXRad[] = { 
//   {   1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16
{ 7, 0x02, 0x01, 0x01, 0x01, 0x8C, 0xBA, 0x80},				// 0 	Ingen patch, TCXOfrek och TCXO Enabled

// {8, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},		// 1	Rör ingenting gällande GPIO:s nu
{ 8, 0x13, 0x01, 0x00, 0x03, 0x02, 0x27, 0x00, 0x40},		// 1	0 och 1=Input and output drivers disabled, 2=hög, 3=låg, nIRQ=Active low interrupt signal, SDO=Behavior of this pin is not modified, outputs will have a medium drive strength.
//{ 8, 0x13, 0x1B, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00},		// 1 	Använd GPIO_0 som RSSI-indikator (0x1B) och GPIO_0 som CTS (0x00)

{ 6, 0x11, 0x00, 0x02, 0x00, 0x00, 0x00},	// 2
{ 5, 0x11, 0x00, 0x01, 0x03, 0x20},	// 3
{ 5, 0x11, 0x01, 0x01, 0x00, 0x02},	// 4
{ 5, 0x11, 0x01, 0x01, 0x02, 0x0B},	// 5
{ 8, 0x11, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00},	// 6
{13, 0x11, 0x10, 0x09, 0x00, 0x08, 0x14, 0x00, 0x06, 0x3D, 0x00, 0x00, 0x00, 0x00},	// 7
{10, 0x11, 0x11, 0x06, 0x00, 0x06, 0xDA, 0x91, 0xD3, 0x00, 0x00},										// 8	Synkordet ICKE inverterat???????
{11, 0x11, 0x12, 0x07, 0x00, 0x04, 0x01, 0x08, 0xFF, 0xFF, 0x20, 0x0B},									// 9	SET_PROPERTY, sista parametern innehåller bit_order, ska vara 1 (0A ska vara 0B
{16, 0x11, 0x12, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x30, 0x20, 0x00, 0x11, 0x05, 0x80, 0x00, 0x00, 0x00},	// 10
{16, 0x11, 0x12, 0x0C, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},	// 11	
{16, 0x11, 0x12, 0x0C, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},	// 12
{13, 0x11, 0x12, 0x09, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{ 8, 0x11, 0x12, 0x04, 0x36, 0x00, 0x00, 0x00, 0x00},
{16, 0x11, 0x20, 0x0C, 0x00, 0x02, 0x80, 0x07, 0x00, 0x5D, 0xC0, 0x01, 0x8C, 0xBA, 0x80, 0x00, 0x00},	// 15
{ 5, 0x11, 0x20, 0x01, 0x0C, 0xC2},
{16, 0x11, 0x20, 0x0C, 0x18, 0x01, 0x80, 0x08, 0x03, 0x80, 0x00, 0x30, 0x20, 0x0C, 0xE8, 0x02, 0xA5},	// 17
{16, 0x11, 0x20, 0x0C, 0x24, 0x00, 0xC1, 0x95, 0x00, 0x61, 0x00, 0xC2, 0x00, 0x54, 0x62, 0x80, 0x08},	// 18
{ 7, 0x11, 0x20, 0x03, 0x30, 0x24, 0x69, 0x80},
{ 5, 0x11, 0x20, 0x01, 0x35, 0xE0},
{16, 0x11, 0x20, 0x0C, 0x38, 0x11, 0x94, 0x94, 0x80, 0x1A, 0x80, 0x00, 0x00, 0x2B, 0x0C, 0x84, 0x22},	// 21
//                             45    46    47    48    49    4A    4B    4C = xxxx.xxx1
{12, 0x11, 0x20, 0x08, 0x45, 0x8F, 0x00, 0x5E, 0x02, 0x00, 0x13, 0x06, 0x01},	// RXTXRad[]
//{12, 0x11, 0x20, 0x08, 0x45, 0x8F, 0x00, 0x5E, 0x02, 0x00, 0x10, 0x06, 0x00},

//                                                           ¯¯¯¯ 0xFF, 0x1F (halva sträckan), 0x0F=alltid röd
//                             4C    4D    4E
{ 7, 0x11, 0x20, 0x03, 0x4C, 0x04, 0x1C, 0x40},		// 23	Adress 0x4C: 00 n nn nnn = 00 0 00 100	//  Latches RSSI at 11*Tb after RX is enabled. (3*Tb garbage + 8*Tb)
//                               4C    4D    4E
//{ 7, 0x11, 0x20, 0x03, 0x4C, 0x09, 0x1C, 0x40},	// 23	Adress 0x4C: 00 n nn nnn = 00 0 01 001

{ 6, 0x11, 0x20, 0x02, 0x50, 0x94, 0x0A},	// outdiv = 010 == 8, 420-525MHz
{ 6, 0x11, 0x20, 0x02, 0x54, 0x03, 0x07},			// 25
{ 5, 0x11, 0x20, 0x01, 0x57, 0x00},
{ 9, 0x11, 0x20, 0x05, 0x5B, 0x42, 0x04, 0x07, 0x78, 0x20},		// 27
{16, 0x11, 0x21, 0x0C, 0x00, 0xFF, 0xC4, 0x30, 0x7F, 0xF5, 0xB5, 0xB8, 0xDE, 0x05, 0x17, 0x16, 0x0C},	// 28
{16, 0x11, 0x21, 0x0C, 0x0C, 0x03, 0x00, 0x15, 0xFF, 0x00, 0x00, 0xFF, 0xC4, 0x30, 0x7F, 0xF5, 0xB5},	// 29
{16, 0x11, 0x21, 0x0C, 0x18, 0xB8, 0xDE, 0x05, 0x17, 0x16, 0x0C, 0x03, 0x00, 0x15, 0xFF, 0x00, 0x00},	// 30
{ 5, 0x11, 0x22, 0x01, 0x03, 0x1D},
{11, 0x11, 0x23, 0x07, 0x00, 0x2C, 0x0E, 0x0B, 0x04, 0x0C, 0x73, 0x03},
{16, 0x11, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},	// 33

//{12, 0x11, 0x40, 0x08, 0x00, 0x41, 0x0E, 0xE6, 0xA2, 0x07, 0xE0, 0x20, 0xFE},		// 34	434.607MHz
//{12, 0x11, 0x40, 0x08, 0x00, 0x41, 0x0E, 0xE6, 0xF3, 0x07, 0xE0, 0x20, 0xFE},		// 34	434.608MHz
//{12, 0x11, 0x40, 0x08, 0x00, 0x41, 0x0E, 0xE7, 0x44, 0x07, 0xE0, 0x20, 0xFE},		// 34	434.609MHz	testad
{12, 0x11, 0x40, 0x08, 0x00, 0x41, 0x0E, 0xE7, 0x94, 0x07, 0xE0, 0x20, 0xFE},		// 34	434.610MHz	testad och fungerar lite bättre än 434.609
//{12, 0x11, 0x40, 0x08, 0x00, 0x41, 0x0E, 0xE7, 0xE5, 0x07, 0xE0, 0x20, 0xFE},		// 34	434.611MHz

{ 8, 0x11, 0x02, 0x04, 0x00, 0x05, 0x06, 0x0A, 0x09},		// 35 Sätter upp FRR (Fast Response Register), 
//{ 8, 0x13, 0x1B, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00},		// 35 	Använd GPIO_0 som RSSI-indikator och GPIO_0 som CTS

{ 8, 0x32, 0x00, 0x00, 0x00, 0x40, 0x08, 0x03, 0x08},		// 36	Startar RX och stannar när ett meddelande mottagits, fungerar bra

{0x02, 0x34, 0x08},											// 37	CHANGE_STATE till RX
{0x02, 0x34, 0x02},											// 38	CHANGE_STATE till SPI_ACTIVE
{0x02, 0x34, 0x03},											// 39 	CHANGE_STATE to READY
{0x02, 0x34, 0x01},											// 40	CHANGE_STATE to SLEEP or STANDBY  (puls off?) 	(se GLOBAL_CLK_CFG:CLK_32K_SEL)
{ 8, 0x13, 17, 20, 0x01, 0x01, 0x27, 0x00, 0x40}			// 41	0 och 1=Input and output drivers disabled, 2=hög, 3=låg, nIRQ=Active low interrupt signal, SDO=Behavior of this pin is not modified, outputs will have a medium drive strength.
}; 
//   {   1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16

// TRX_0_IN == GPIO_0	TX_CLK
// TRX_1_IN	== GPIO_1	TX_DATA

// Antenn-switchen används inte i RX-läget!
// {0x08, 0x13, 0x01, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00},		// 35 Slår på switchen för UHF
// {0x08, 0x13, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00}		// 37 Slår av matningsspänningen till antenn-switchen

//       32    CH  Start LEN_H LEN_L 

// { 2, {0x15, 0x02 }},	// Access the current byte counts in the TX and RX FIFOs, and provide for resetting the FIFOs.
// 36, 0-35

// OBS fordras!!!

// Exempel:
// {0x0C, 0x11, 0x40, 0x08, 0x00, 0x44, 0x0D, 0x89, 0xD8, 0x17, 0xA1, 0x20, 0xFA},
// 0C=antal, 11=set prop, 40=grupp, 08=antal värden, 00=startadress, ....=data

// -------------------------------------------------------------------------------------------------------------------------
// OBS Parameter nummer 2 i START_UP (0x07, 0x02, 0xXX) får inte vara 0x81 i produktionskretsarna eftersom ingen Patch är installerad i dem!
// -------------------------------------------------------------------------------------------------------------------------
const rom struct MyNewRad UtilRad[] = { 
{0x07, 0x02, 0x01, 0x01, 0x01, 0x8C, 0xBA, 0x80},		// 0 Slå på "EZRadio PRO functional mode"
{ 8, 0x13, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x60},	// 1 Sätter I/O:s
{ 1, 0x20}, 											// 2 Reset av alla IRQ
{ 2, 0x34, 0x01},										// 3 CHANGE_STATE to SLEEP or STANDBY  (puls off?) 	(se GLOBAL_CLK_CFG:CLK_32K_SEL)
{ 8, 0x11, 0x02, 0x04, 0x00, 0x05, 0x06, 0x0A, 0x09}	// 4 Sätter upp FRR (Fast Response Register), 
};

// FRR_A = INT_MODEM_STATUS
// FRR_B = INT_MODEM_PEND
// FRR_C = Latched RSSI value?? Testa!
// FRR_D = Current State
/*
INT_MODEM_STATUS
INT_MODEM_PEND
#define FRR_A	0x50
#define FRR_B	0x51
#define FRR_C	0x53
#define FRR_D	0x57
*/

// -------------------------------------------------------------------------------------------------------------------------
// Totalt 297 bytes
// OBS Parameter nummer 2 i START_UP (0x07, 0x02, 0xXX) får inte vara 0x81 i produktionskretsarna eftersom ingen Patch är installerad i dem!
// -------------------------------------------------------------------------------------------------------------------------
/* const rom struct MyNewRad BitBangRad[] = {
{0x07, 0x02, 0x01, 0x01, 0x01, 0x8C, 0xBA, 0x80},				// 00

// TX: 
//{0x08, 0x13, 0x10, 0x13, 0x03, 0x02, 0x00, 0x00, 0x00},		// 01 Ställer in för bitbang och slår på switchen för UHF
{0x08, 0x13, 0x10, 0x04, 0x03, 0x02, 0x00, 0x00, 0x00},			// 01 Ställer in för bitbang och slår på switchen för UHF
// RX: 
{0x08, 0x13, 0x11, 0x14, 0x03, 0x02, 0x00, 0x00, 0x00},			// 02 Ställer in för bitbang och slår på switchen för UHF

{0x06, 0x11, 0x00, 0x02, 0x00, 0x00, 0x00},						// 03
{0x05, 0x11, 0x00, 0x01, 0x03, 0x20},
{0x05, 0x11, 0x01, 0x01, 0x00, 0x00},
{0x08, 0x11, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x05, 0x11, 0x10, 0x01, 0x01, 0x14},
{0x05, 0x11, 0x10, 0x01, 0x04, 0x21},
{0x05, 0x11, 0x12, 0x01, 0x06, 0x40},
{0x10, 0x11, 0x20, 0x0C, 0x00, 0x0A, 0x00, 0x07, 0x00, 0xBB, 0x80, 0x01, 0x8C, 0xBA, 0x80, 0x00, 0x01},		// 10
{0x05, 0x11, 0x20, 0x01, 0x0C, 0x43},
{0x10, 0x11, 0x20, 0x0C, 0x18, 0x01, 0x80, 0x08, 0x03, 0x80, 0x00, 0x30, 0x20, 0x0C, 0xE8, 0x01, 0x53},		// 12
{0x10, 0x11, 0x20, 0x0C, 0x24, 0x01, 0x83, 0x2B, 0x00, 0xC1, 0x00, 0xC2, 0x00, 0x54, 0x62, 0x80, 0xAB},		
{0x07, 0x11, 0x20, 0x03, 0x30, 0x02, 0x8F, 0x80},
{0x05, 0x11, 0x20, 0x01, 0x35, 0xE0},
{0x10, 0x11, 0x20, 0x0C, 0x38, 0x11, 0x4A, 0x4A, 0x80, 0x1A, 0x6A, 0xAB, 0x00, 0x2A, 0x0C, 0x84, 0x23},		// 16
{0x0C, 0x11, 0x20, 0x08, 0x45, 0x8F, 0x00, 0x9D, 0x02, 0x00, 0x13, 0x06, 0x01},		// 17
{0x07, 0x11, 0x20, 0x03, 0x4C, 0x09, 0x1C, 0x40},
{0x06, 0x11, 0x20, 0x02, 0x50, 0x94, 0x0A},
{0x06, 0x11, 0x20, 0x02, 0x54, 0x03, 0x07},
{0x05, 0x11, 0x20, 0x01, 0x57, 0x00},
{0x09, 0x11, 0x20, 0x05, 0x5B, 0x42, 0x04, 0x08, 0x78, 0x20},
{0x10, 0x11, 0x21, 0x0C, 0x00, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01},		// 23
{0x10, 0x11, 0x21, 0x0C, 0x0C, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9},		// 24
{0x10, 0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F},		// 25

{0x08, 0x11, 0x22, 0x04, 0x00, 0x18, 0x1F, 0xC0, 0x1D},
{0x0B, 0x11, 0x23, 0x07, 0x00, 0x2C, 0x0E, 0x0B, 0x04, 0x0C, 0x73, 0x03},
{0x0C, 0x11, 0x40, 0x08, 0x00, 0x41, 0x0E, 0xE7, 0x44, 0x03, 0xF0, 0x20, 0xFE},		// 28

// TX:
{0x05, 0x31, 0x00, 0x00, 0x00, 0x00},						// 29
// RX:
{0x08, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08},		// 30

{0x08, 0x13, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00},		// 31 Slår av matningsspänningen till antenn-switchen, samtliga "Input and output drivers disabled."
{0x02, 0x34, 0x07},											// 32 CHANGE_STATE to TX state
{0x02, 0x34, 0x08},											// 33 CHANGE_STATE to RX state
{0x02, 0x34, 0x01}											// 34 CHANGE_STATE to SLEEP or STANDBY (se GLOBAL_CLK_CFG:CLK_32K_SEL)
};
*/

// -------------------------------------------------------------------------------------------------------------------------
// OBS Parameter nummer 2 i START_UP (0x07, 0x02, 0xXX) får inte vara 0x81 i produktionskretsarna eftersom ingen Patch är installerad i dem!
// 2400/1200 Manchester TX
// -------------------------------------------------------------------------------------------------------------------------
//        1     2     3     4     5     6     7     8     9     A     B     C     D     E     F   10
const rom struct MyNewRad BBTXRad[] = {
{0x07, 0x02, 0x01, 0x01, 0x01, 0x8C, 0xBA, 0x80},		// 0
{0x08, 0x13, 0x10, 0x04, 0x03, 0x02, 0x00, 0x00, 0x00},			// Slår på switchen för UHF
{0x06, 0x11, 0x00, 0x02, 0x00, 0x00, 0x00},
{0x05, 0x11, 0x00, 0x01, 0x03, 0x20},
{0x05, 0x11, 0x01, 0x01, 0x00, 0x00},
{0x08, 0x11, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x05, 0x11, 0x10, 0x01, 0x04, 0x21},
{0x10, 0x11, 0x20, 0x0C, 0x00, 0x2A, 0x00, 0x07, 0x00, 0x5D, 0xC0, 0x01, 0x8C, 0xBA, 0x80, 0x00, 0x00},
{0x05, 0x11, 0x20, 0x01, 0x0C, 0x91},
{0x10, 0x11, 0x20, 0x0C, 0x18, 0x01, 0x80, 0x08, 0x03, 0x80, 0x00, 0x30, 0x20, 0x0C, 0xE8, 0x02, 0xA5},
{0x10, 0x11, 0x20, 0x0C, 0x24, 0x00, 0xC1, 0x95, 0x00, 0x61, 0x00, 0xC2, 0x00, 0x54, 0x62, 0x80, 0xAB},
{0x07, 0x11, 0x20, 0x03, 0x30, 0x02, 0x4E, 0x80},
{0x05, 0x11, 0x20, 0x01, 0x35, 0xE0},
{0x10, 0x11, 0x20, 0x0C, 0x38, 0x11, 0x94, 0x94, 0x80, 0x1A, 0x60, 0x00, 0x00, 0x2B, 0x0C, 0x84, 0x23},
{0x09, 0x11, 0x20, 0x05, 0x45, 0x8F, 0x00, 0x47, 0x02, 0x00},
{0x08, 0x11, 0x20, 0x04, 0x4B, 0x06, 0x09, 0x1C, 0x40},
{0x06, 0x11, 0x20, 0x02, 0x50, 0x94, 0x0A},		// outdiv = 010 == 8, 420-525MHz
{0x06, 0x11, 0x20, 0x02, 0x54, 0x03, 0x07},
{0x05, 0x11, 0x20, 0x01, 0x57, 0x00},
{0x09, 0x11, 0x20, 0x05, 0x5B, 0x42, 0x04, 0x06, 0x78, 0x20},
{0x10, 0x11, 0x21, 0x0C, 0x00, 0xFF, 0xC4, 0x30, 0x7F, 0xF5, 0xB5, 0xB8, 0xDE, 0x05, 0x17, 0x16, 0x0C},
{0x10, 0x11, 0x21, 0x0C, 0x0C, 0x03, 0x00, 0x15, 0xFF, 0x00, 0x00, 0xFF, 0xC4, 0x30, 0x7F, 0xF5, 0xB5},
{0x10, 0x11, 0x21, 0x0C, 0x18, 0xB8, 0xDE, 0x05, 0x17, 0x16, 0x0C, 0x03, 0x00, 0x15, 0xFF, 0x00, 0x00},
{0x08, 0x11, 0x22, 0x04, 0x00, 0x18, 0x01,0xC0, 0x1D},
//                                   ¯¯¯¯ PA_PWR_LVL (PA output power level) 0x1F
//           				   ¯¯¯¯ PA_MODE
{0x0B, 0x11, 0x23, 0x07, 0x00, 0x2C, 0x0E, 0x0B, 0x04, 0x0C, 0x73, 0x03},
{0x0C, 0x11, 0x40, 0x08, 0x00, 0x41, 0x0E, 0xE7, 0x44, 0x01, 0xF8, 0x20, 0xFE},
{0x05, 0x31, 0x00, 0x00, 0x00, 0x00}					// 26
};
//        1     2     3     4     5     6     7     8     9     A     B     C     D     E     F   10
// [0-26]
// OBS Parameter nummer 2 i START_UP (0x07, 0x02, 0xXX) får inte vara 0x81 i produktionskretsarna eftersom ingen Patch är installerad i dem!



#endif